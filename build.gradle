buildscript {
    ext {
        lombokVersion = "1.18.6"
        mapstructVersion = "1.3.0.Final"
        autoServiceVersion = "1.0-rc2"
        slf4jApi = "1.7.25"
    }
    repositories {
        mavenLocal()
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.4"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0"
    }
}
apply plugin: 'io.codearte.nexus-staging'
apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'maven'
apply plugin: "com.github.johnrengelman.shadow"
apply plugin: 'maven-publish'
apply plugin: 'signing'

group 'com.github.azbh111'
version = '0.0.4'

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'org.javassist:javassist:3.20.0-GA'
}

shadowJar {
    manifest {
        attributes 'Premain-Class': 'com.github.azbh111.jdbclogger.instrument.Agent'
    }
    classifier = null
    relocate 'javassist', 'relocate.javassist'
}

//    关闭java8严格的javadoc检查
if (JavaVersion.current().isJava8Compatible()) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}


tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc) {
    options.encoding = "UTF-8"
}

// 让idea下载源码
idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

repositories {
    mavenLocal()
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
}

compileJava {
    // 编译保留参数名字
    options.compilerArgs << "-parameters"
    // 将apt生成的文件放在源码目录,方便看
    options.compilerArgs << "-s"
    options.compilerArgs << "$projectDir/src/main/generated"
    // 关闭mapstruct生成类注解上的时间戳
    options.compilerArgs << "-Amapstruct.suppressGeneratorTimestamp=true"
    // 关闭mapstruct生成类注解上的版本信息
    options.compilerArgs << "-Amapstruct.suppressGeneratorVersionInfoComment=true"
    // mapstruct未映射的字段,不警告
    options.compilerArgs << "-Amapstruct.unmappedTargetPolicy=IGNORE"
    // 构建之前先删除自动生成的类
    doFirst {
        file("$projectDir/src/main/generated").deleteDir();
        file("$projectDir/src/main/generated").mkdirs();
    }
}

sourceSets {
    main {
        java {
            srcDir "$projectDir/src/main/generated"
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

javadoc {
    // <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    // 防止本地打开中文乱码
    options.addStringOption("charset", "UTF-8")
}

configurations {
    deployerJars
}


// 最主要的是这里
publishing {
    publications {

        // 这一个推送项目名称，mavenJava 相当于是一个 task name
        shadow(MavenPublication) { publication ->
            project.shadow.component(publication)

            pom {
                name = project.group + ":" + project.name
                if (project.description == null || project.description.isEmpty()) {
                    description = project.group + ":" + project.name
                } else {
                    description = project.description
                }
                url = "https://github.com/azbh111/JDBCLogger.git"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "azbh111"
                        name = "pan"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/azbh111/JDBCLogger.git"
                    developerConnection = "scm:git:https://github.com/azbh111/JDBCLogger.git"
                    url = "https://github.com/azbh111/JDBCLogger"
                }
            }
        }

        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.name
            version project.version
            from components.java
            artifact tasks.sourcesJar
            artifact tasks.javadocJar
        }
    }
    repositories {
        maven {
            name 'mavenCenter'
            def url_ = null
            if (project.version.endsWith("-SNAPSHOT")) {
                url_ = 'https://oss.sonatype.org/content/repositories/snapshots/'
            } else {
                url_ = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            }
            credentials {
                username = sonatypeUsername
                password = sonatypePassword
            }
            url url_
        }
    }
}

// 签名
signing {
    sign publishing.publications.mavenJava
    sign publishing.publications.shadow
}

// 自动close/release
nexusStaging {
    packageGroup = project.group
    username = sonatypeUsername
    password = sonatypePassword
}